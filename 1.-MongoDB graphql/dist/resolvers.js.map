{"version":3,"sources":["../src/resolvers.js"],"names":["resolvers","Query","hello","tasks","task","search","root","args","result","filter","v","_id","QueryMascotas","Mascotas","find","Mutation","createTask","_","input","length","push","console","log","createMascotas","nuevaMascota","save","updateMascotas","findByIdAndUpdate","new","deleteMascotas","findByIdAndDelete"],"mappings":";;;;;;;AAAA;;AAEA;;;;;;;;AAEO,IAAMA,gCAAY;AACrBC,WAAM;AACFC,eAAO,iBAAM;AACT,mBAAO,wBAAP;AACH,SAHC;AAIFC,aAJE,mBAIM;AACJ,mBAAOC,YAAP;AACH,SANC;AAOFC,cAPE,kBAOKC,IAPL,EAOUC,IAPV,EAOe;AACb,gBAAIC,SAASJ,aAAKK,MAAL,CAAY,aAAK;AAC1B,uBAAOC,EAAEC,GAAF,IAASJ,KAAKI,GAArB;AACH,aAFY,CAAb;AAGA,mBAAOH,MAAP;AACH,SAZC;AAaII,qBAbJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCAceC,mBAASC,IAAT,EAdf;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,KADe;AAkBrBC,cAAS;AACLC,kBADK,sBACMC,CADN,SACiB;AAAA,gBAAPC,KAAO,SAAPA,KAAO;;AAClB;AACAA,kBAAMP,GAAN,GAAYP,aAAKe,MAAjB;AACAf,yBAAKgB,IAAL,CAAUF,KAAV;AACAG,oBAAQC,GAAR,CAAYlB,YAAZ;AACA,mBAAOc,KAAP;AAEH,SARI;AASCK,sBATD;AAAA,kGASgBN,CAThB;AAAA,oBASoBC,KATpB,SASoBA,KATpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAUKM,4CAVL,GAUoB,wBAASN,KAAT,CAVpB;AAAA;AAAA;AAAA,uCAYSM,aAAaC,IAAb,EAZT;;AAAA;AAaGJ,wCAAQC,GAAR,CAAYE,YAAZ;AAbH;AAAA;;AAAA;AAAA;AAAA;;AAeGH,wCAAQC,GAAR;;AAfH;AAAA,kEAiBME,YAjBN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAmBCE,sBAnBD;AAAA,kGAmBgBT,CAnBhB;AAAA,oBAmBoBN,GAnBpB,SAmBoBA,GAnBpB;AAAA,oBAmBwBO,KAnBxB,SAmBwBA,KAnBxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCAoBYL,mBAASc,iBAAT,CAA2BhB,GAA3B,EAAiCO,KAAjC,EAAyC,EAACU,KAAK,IAAN,EAAzC,CApBZ;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAsBCC,sBAtBD;AAAA,kGAsBgBZ,CAtBhB;AAAA,oBAsBoBN,GAtBpB,SAsBoBA,GAtBpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCAuBYE,mBAASiB,iBAAT,CAA2BnB,GAA3B,CAvBZ;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAlBY,CAAlB","file":"resolvers.js","sourcesContent":["import { task } from \"./sample\";\r\n\r\nimport Mascotas from \"./Models/Mascotas\";\r\n\r\nexport const resolvers = {\r\n    Query:{\r\n        hello: () => {\r\n            return 'Hola mundo con GraphQL'\r\n        },\r\n        tasks() {\r\n            return task\r\n        },\r\n        search(root,args){\r\n            var result = task.filter(v => {\r\n                return v._id == args._id\r\n            });\r\n            return result;\r\n        },\r\n        async QueryMascotas(){\r\n            return await Mascotas.find(); //nos arroje todos\r\n        }\r\n    },\r\n    Mutation:{\r\n        createTask(_, {input}){\r\n            //console.log(input)\r\n            input._id = task.length\r\n            task.push(input)\r\n            console.log(task)\r\n            return input;\r\n\r\n        },\r\n        async createMascotas(_, {input}){\r\n            const nuevaMascota = Mascotas(input)\r\n            try {\r\n                await nuevaMascota.save();\r\n                console.log(nuevaMascota)\r\n            } catch (error) {\r\n                console.log(error)\r\n            }\r\n            return nuevaMascota\r\n        },\r\n        async updateMascotas(_, {_id,input}){\r\n            return await Mascotas.findByIdAndUpdate(_id , input , {new: true})\r\n        },\r\n        async deleteMascotas(_, {_id}){\r\n            return await Mascotas.findByIdAndDelete(_id)\r\n        }\r\n    }\r\n}"]}